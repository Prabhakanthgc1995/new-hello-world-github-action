name: Java CI with Maven, SonarQube, and Production Deployment

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Trigger deploy to production'
        required: true
        default: 'false'

jobs:
  build_and_test:
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat installed (Staging)
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Environment Setup Script (env-setup.sh)
        run: |
          chmod +x ./env-setup.sh
          ./env-setup.sh  # This sets up Java, Maven, etc.

      - name: Build with Maven
        run: mvn clean install -DskipTests
        if: ${{ github.event_name != 'pull_request' }}  # Only run on push events, skip for PR

      - name: Run Unit Tests with Maven
        run: mvn test
        if: ${{ success() }}  # Run this step only if the previous build step succeeded

  sonar_analysis:
    runs-on: [self-hosted, staging]
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'success' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Ensure the shallow clone is disabled for relevant analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Cache SonarQube packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=prabhakanth_hello-world-war1

  upload_artifact:
    runs-on: [self-hosted, staging]
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure Maven settings
        run: |
          echo "Uploading artifact to JFrog Artifactory..."
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>my-repo</id>
                      <username>${{ secrets.JFROG_USERNAME }}</username>
                      <password>${{ secrets.JFROG_TOKEN }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

          mvn clean deploy

  deploy:
    runs-on: self-hosted  # Use dynamic environment (staging or production)
    needs: [sonar_analysis, upload_artifact]
    strategy:
      matrix:
        environment: [staging, production]  # Deploy to both staging and production environments
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Tomcat (Staging/Production)
        run: |
          echo "Deploying to ${{ matrix.environment }}..."
          if [ "${{ matrix.environment }}" == "staging" ]; then
            cd /home/ubuntu/apache-tomcat-10.1.34/webapps
            curl -L -u "${{ secrets.TOMCAT_USERNAME }}:${{ secrets.TOMCAT_PASSWORD }}" -O "http://65.1.64.36:8082/artifactory/my-repo-libs-release/com/example/my-helloworld/1.0.0.10/my-helloworld-1.0.0.10.war"
          elif [ "${{ matrix.environment }}" == "production" ]; then
            if [[ $GITHUB_REF == "refs/heads/master" ]]; then
              cd /home/ubuntu/apache-tomcat-10.1.34/webapps
              curl -L -u "${{ secrets.TOMCAT_USERNAME }}:${{ secrets.TOMCAT_PASSWORD }}" -O "http://65.1.64.36:8082/artifactory/my-repo-libs-release/com/example/my-helloworld/1.0.0.10/my-helloworld-1.0.0.10.war"
            else
              echo "Skipping production deployment: Only from master branch"
            fi
          fi
        if: ${{ needs.upload_artifact.result == 'success' }}

  deploy_input_condition:
    runs-on: production
    if: ${{ github.event.inputs.deploy == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Production (Input Triggered)
        run: |
          echo "Manual deploy triggered, deploying to production..."
